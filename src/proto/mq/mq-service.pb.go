// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mq-service.proto

/*
Package mq is a generated protocol buffer package.

It is generated from these files:
	mq-service.proto

It has these top-level messages:
	SystemEvent
	EventImageScanUploaded
	PubImageScanUploadedRequest
	PubImageScanUploadedResponse
*/
package mq

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "gitlab.com/project-leaf/mq-service-go/src/proto/core"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A wrapper struct encapsulating one of any possible event types flowing through the system.
type SystemEvent struct {
	Context *core.Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*SystemEvent_ImageScanUploaded
	Event isSystemEvent_Event `protobuf_oneof:"event"`
}

func (m *SystemEvent) Reset()                    { *m = SystemEvent{} }
func (m *SystemEvent) String() string            { return proto.CompactTextString(m) }
func (*SystemEvent) ProtoMessage()               {}
func (*SystemEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isSystemEvent_Event interface {
	isSystemEvent_Event()
}

type SystemEvent_ImageScanUploaded struct {
	ImageScanUploaded *EventImageScanUploaded `protobuf:"bytes,2,opt,name=imageScanUploaded,oneof"`
}

func (*SystemEvent_ImageScanUploaded) isSystemEvent_Event() {}

func (m *SystemEvent) GetEvent() isSystemEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *SystemEvent) GetContext() *core.Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SystemEvent) GetImageScanUploaded() *EventImageScanUploaded {
	if x, ok := m.GetEvent().(*SystemEvent_ImageScanUploaded); ok {
		return x.ImageScanUploaded
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SystemEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SystemEvent_OneofMarshaler, _SystemEvent_OneofUnmarshaler, _SystemEvent_OneofSizer, []interface{}{
		(*SystemEvent_ImageScanUploaded)(nil),
	}
}

func _SystemEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SystemEvent)
	// event
	switch x := m.Event.(type) {
	case *SystemEvent_ImageScanUploaded:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImageScanUploaded); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SystemEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _SystemEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SystemEvent)
	switch tag {
	case 2: // event.imageScanUploaded
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventImageScanUploaded)
		err := b.DecodeMessage(msg)
		m.Event = &SystemEvent_ImageScanUploaded{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SystemEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SystemEvent)
	// event
	switch x := m.Event.(type) {
	case *SystemEvent_ImageScanUploaded:
		s := proto.Size(x.ImageScanUploaded)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventImageScanUploaded struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *EventImageScanUploaded) Reset()                    { *m = EventImageScanUploaded{} }
func (m *EventImageScanUploaded) String() string            { return proto.CompactTextString(m) }
func (*EventImageScanUploaded) ProtoMessage()               {}
func (*EventImageScanUploaded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventImageScanUploaded) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PubImageScanUploadedRequest struct {
	Context *core.Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Id      string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *PubImageScanUploadedRequest) Reset()                    { *m = PubImageScanUploadedRequest{} }
func (m *PubImageScanUploadedRequest) String() string            { return proto.CompactTextString(m) }
func (*PubImageScanUploadedRequest) ProtoMessage()               {}
func (*PubImageScanUploadedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PubImageScanUploadedRequest) GetContext() *core.Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PubImageScanUploadedRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PubImageScanUploadedResponse struct {
	Error *core.Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *PubImageScanUploadedResponse) Reset()                    { *m = PubImageScanUploadedResponse{} }
func (m *PubImageScanUploadedResponse) String() string            { return proto.CompactTextString(m) }
func (*PubImageScanUploadedResponse) ProtoMessage()               {}
func (*PubImageScanUploadedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PubImageScanUploadedResponse) GetError() *core.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*SystemEvent)(nil), "mq.SystemEvent")
	proto.RegisterType((*EventImageScanUploaded)(nil), "mq.EventImageScanUploaded")
	proto.RegisterType((*PubImageScanUploadedRequest)(nil), "mq.PubImageScanUploadedRequest")
	proto.RegisterType((*PubImageScanUploadedResponse)(nil), "mq.PubImageScanUploadedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InternalMQService service

type InternalMQServiceClient interface {
	// Publish an event indicating that the specified scan image was successfully uploaded.
	PubImageScanUploaded(ctx context.Context, in *PubImageScanUploadedRequest, opts ...grpc.CallOption) (*PubImageScanUploadedResponse, error)
}

type internalMQServiceClient struct {
	cc *grpc.ClientConn
}

func NewInternalMQServiceClient(cc *grpc.ClientConn) InternalMQServiceClient {
	return &internalMQServiceClient{cc}
}

func (c *internalMQServiceClient) PubImageScanUploaded(ctx context.Context, in *PubImageScanUploadedRequest, opts ...grpc.CallOption) (*PubImageScanUploadedResponse, error) {
	out := new(PubImageScanUploadedResponse)
	err := grpc.Invoke(ctx, "/mq.InternalMQService/PubImageScanUploaded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalMQService service

type InternalMQServiceServer interface {
	// Publish an event indicating that the specified scan image was successfully uploaded.
	PubImageScanUploaded(context.Context, *PubImageScanUploadedRequest) (*PubImageScanUploadedResponse, error)
}

func RegisterInternalMQServiceServer(s *grpc.Server, srv InternalMQServiceServer) {
	s.RegisterService(&_InternalMQService_serviceDesc, srv)
}

func _InternalMQService_PubImageScanUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubImageScanUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalMQServiceServer).PubImageScanUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.InternalMQService/PubImageScanUploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalMQServiceServer).PubImageScanUploaded(ctx, req.(*PubImageScanUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalMQService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.InternalMQService",
	HandlerType: (*InternalMQServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubImageScanUploaded",
			Handler:    _InternalMQService_PubImageScanUploaded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq-service.proto",
}

func init() { proto.RegisterFile("mq-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0x87, 0xdd, 0x40, 0x2d, 0xce, 0xa2, 0xd8, 0x20, 0x52, 0x56, 0xc1, 0xba, 0x17, 0x7b, 0x71,
	0x0f, 0xf5, 0x09, 0x54, 0x0a, 0x56, 0x10, 0x34, 0x8b, 0x82, 0xc7, 0xed, 0x66, 0x90, 0x40, 0x93,
	0x6c, 0xfe, 0xb4, 0xe8, 0x33, 0xf8, 0xd2, 0xb2, 0x49, 0xf5, 0x60, 0x57, 0xa1, 0xc7, 0xcc, 0x7c,
	0xbf, 0x8f, 0x99, 0x09, 0x1c, 0x4a, 0x73, 0xe9, 0xd0, 0xae, 0x44, 0x8d, 0x45, 0x63, 0xb5, 0xd7,
	0x94, 0x48, 0x93, 0x41, 0xad, 0xed, 0xfa, 0x9d, 0x7f, 0x26, 0x90, 0x96, 0x1f, 0xce, 0xa3, 0x9c,
	0xae, 0x50, 0x79, 0x7a, 0x01, 0xfd, 0x5a, 0x2b, 0x8f, 0xef, 0x7e, 0x98, 0x8c, 0x92, 0x71, 0x3a,
	0xd9, 0x2f, 0x02, 0x7d, 0x1b, 0x8b, 0xec, 0xbb, 0x4b, 0xef, 0x61, 0x20, 0x64, 0xf5, 0x86, 0x65,
	0x5d, 0xa9, 0xe7, 0x66, 0xa1, 0x2b, 0x8e, 0x7c, 0x48, 0x42, 0x24, 0x2b, 0xa4, 0x29, 0x82, 0x6e,
	0xf6, 0x9b, 0xb8, 0xdb, 0x61, 0x9b, 0xb1, 0x9b, 0x3e, 0xf4, 0xb0, 0xc5, 0xf3, 0x31, 0x1c, 0x77,
	0xe7, 0xe8, 0x01, 0x10, 0xc1, 0xc3, 0x48, 0x7b, 0x8c, 0x08, 0x9e, 0xbf, 0xc0, 0xc9, 0xe3, 0x72,
	0xbe, 0xc1, 0x31, 0x34, 0x4b, 0x74, 0x5b, 0xac, 0x11, 0xbd, 0xe4, 0xc7, 0x7b, 0x0d, 0xa7, 0xdd,
	0x5e, 0xd7, 0x68, 0xe5, 0x90, 0x9e, 0x43, 0x0f, 0xad, 0xd5, 0x76, 0xad, 0x4d, 0xa3, 0x76, 0xda,
	0x96, 0x58, 0xec, 0x4c, 0x14, 0x0c, 0x66, 0xca, 0xa3, 0x55, 0xd5, 0xe2, 0xe1, 0xa9, 0x8c, 0xd7,
	0xa7, 0xaf, 0x70, 0xd4, 0xe5, 0xa5, 0x67, 0xed, 0xad, 0xfe, 0xd9, 0x24, 0x1b, 0xfd, 0x0d, 0xc4,
	0x91, 0xe6, 0xbb, 0xe1, 0x27, 0xaf, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xad, 0x27, 0xc8, 0x30,
	0xed, 0x01, 0x00, 0x00,
}
